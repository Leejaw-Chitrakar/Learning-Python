# Simulating Dice Rolls with Visual Representation

This Python script provides a fun and interactive way to simulate the rolling of multiple dice. 
It allows the user to specify the number of dice they want to roll 
And then visually displays the outcome of each die using simple ASCII art. 
Finally, it calculates and prints the total sum of the values rolled. 
This can be a handy little tool for 
1. Games, 
2. Probability exploration, or 
3. Simply for a bit of visual entertainment.

# How it works:

1.  Initialization: 
	The script begins by importing the "random" module, 
	which is essential for generating random numbers to simulate the dice rolls. 
	It also defines a dictionary called "dice_art". 
	This dictionary cleverly maps each possible die value (1 through 6) to a tuple of strings. 
	Each tuple represents the five lines of ASCII art needed to draw the corresponding face of the die.

2.  User Input: 
	The program prompts the user to enter the desired number of dice to roll. 
	This input is then converted to an integer and stored in the "num_of_dice" variable.

3.  Simulating the Rolls: 
	An empty list called "dice" is created to store the results of each die roll. 
	A "for" loop iterates "num_of_dice" times. 
	In each iteration, the "random.randint(1, 6)" function is called to generate a 
	random integer between 1 and 6 (inclusive), simulating the roll of a single die. 
	This result is then appended to the "dice" list.

4.  Visualizing the Dice: 
	The script then iterates through the five lines of the ASCII art for each die face. 
	An outer "for" loop runs from 0 to 4 (representing the five lines). 
	Inside this loop, an inner "for" loop iterates through the "dice" list (containing the results of each roll). 
	For each die roll in the "dice" list, the script uses the "dice_art.get(die)[line]" 
	to retrieve the specific line of ASCII art corresponding to the die's value and 
	the current line number. The "end=""" argument in the "print()" function prevents a 
	newline character from being printed after each die's art line, 
	allowing the dice to be displayed side-by-side on the same line. 
	After processing all the dice for a particular line, a "print()" statement with 
	no arguments is used to move to the next line, creating the stacked visual effect of the dice.

5.  Calculating the Total: 
	Finally, the script iterates through the "dice" list once more to calculate the sum of 
	all the rolled values. A variable "total" is initialized to 0, and in each iteration, 
	the value of the current die is added to it.

6.  Displaying the Result: 
	The script concludes by printing the calculated "total" of all the dice rolls 
	in a user-friendly format.

In essence, this code combines random number generation with a clever use of 
string literals to provide a visual and numerical representation of dice rolls, making it a simple 
yet engaging example of basic Python programming.